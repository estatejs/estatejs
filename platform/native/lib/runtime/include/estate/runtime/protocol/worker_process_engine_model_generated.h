// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORKERPROCESSENGINEMODEL_H_
#define FLATBUFFERS_GENERATED_WORKERPROCESSENGINEMODEL_H_

#include "flatbuffers/flatbuffers.h"

#include "model_generated.h"

struct CellProto;
struct CellProtoBuilder;

struct EngineSourceProto;
struct EngineSourceProtoBuilder;

struct ObjectInstanceProto;
struct ObjectInstanceProtoBuilder;

struct ObjectPropertiesIndexProto;
struct ObjectPropertiesIndexProtoBuilder;

struct CellProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef CellProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CHECKSUM = 4,
    VT_VALUE_BYTES = 6
  };
  uint32_t checksum() const {
    return GetField<uint32_t>(VT_CHECKSUM, 0);
  }
  const flatbuffers::Vector<uint8_t> *value_bytes() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_VALUE_BYTES);
  }
  const ValueProto *value_bytes_nested_root() const {
    return flatbuffers::GetRoot<ValueProto>(value_bytes()->Data());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint32_t>(verifier, VT_CHECKSUM) &&
           VerifyOffset(verifier, VT_VALUE_BYTES) &&
           verifier.VerifyVector(value_bytes()) &&
           verifier.EndTable();
  }
};

struct CellProtoBuilder {
  typedef CellProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_checksum(uint32_t checksum) {
    fbb_.AddElement<uint32_t>(CellProto::VT_CHECKSUM, checksum, 0);
  }
  void add_value_bytes(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value_bytes) {
    fbb_.AddOffset(CellProto::VT_VALUE_BYTES, value_bytes);
  }
  explicit CellProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<CellProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<CellProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<CellProto> CreateCellProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t checksum = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> value_bytes = 0) {
  CellProtoBuilder builder_(_fbb);
  builder_.add_value_bytes(value_bytes);
  builder_.add_checksum(checksum);
  return builder_.Finish();
}

struct CellProto::Traits {
  using type = CellProto;
  static auto constexpr Create = CreateCellProto;
};

inline flatbuffers::Offset<CellProto> CreateCellProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint32_t checksum = 0,
    const std::vector<uint8_t> *value_bytes = nullptr) {
  auto value_bytes__ = value_bytes ? _fbb.CreateVector<uint8_t>(*value_bytes) : 0;
  return CreateCellProto(
      _fbb,
      checksum,
      value_bytes__);
}

struct EngineSourceProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef EngineSourceProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CODE_FILES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *code_files() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_CODE_FILES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CODE_FILES) &&
           verifier.VerifyVector(code_files()) &&
           verifier.VerifyVectorOfStrings(code_files()) &&
           verifier.EndTable();
  }
};

struct EngineSourceProtoBuilder {
  typedef EngineSourceProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_code_files(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> code_files) {
    fbb_.AddOffset(EngineSourceProto::VT_CODE_FILES, code_files);
  }
  explicit EngineSourceProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<EngineSourceProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<EngineSourceProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<EngineSourceProto> CreateEngineSourceProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> code_files = 0) {
  EngineSourceProtoBuilder builder_(_fbb);
  builder_.add_code_files(code_files);
  return builder_.Finish();
}

struct EngineSourceProto::Traits {
  using type = EngineSourceProto;
  static auto constexpr Create = CreateEngineSourceProto;
};

inline flatbuffers::Offset<EngineSourceProto> CreateEngineSourceProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *code_files = nullptr) {
  auto code_files__ = code_files ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*code_files) : 0;
  return CreateEngineSourceProto(
      _fbb,
      code_files__);
}

struct ObjectInstanceProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectInstanceProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERSION = 4,
    VT_DELETED = 6,
    VT_TYPE = 8
  };
  uint64_t version() const {
    return GetField<uint64_t>(VT_VERSION, 0);
  }
  bool deleted() const {
    return GetField<uint8_t>(VT_DELETED, 0) != 0;
  }
  uint8_t type() const {
    return GetField<uint8_t>(VT_TYPE, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_VERSION) &&
           VerifyField<uint8_t>(verifier, VT_DELETED) &&
           VerifyField<uint8_t>(verifier, VT_TYPE) &&
           verifier.EndTable();
  }
};

struct ObjectInstanceProtoBuilder {
  typedef ObjectInstanceProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_version(uint64_t version) {
    fbb_.AddElement<uint64_t>(ObjectInstanceProto::VT_VERSION, version, 0);
  }
  void add_deleted(bool deleted) {
    fbb_.AddElement<uint8_t>(ObjectInstanceProto::VT_DELETED, static_cast<uint8_t>(deleted), 0);
  }
  void add_type(uint8_t type) {
    fbb_.AddElement<uint8_t>(ObjectInstanceProto::VT_TYPE, type, 0);
  }
  explicit ObjectInstanceProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ObjectInstanceProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ObjectInstanceProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<ObjectInstanceProto> CreateObjectInstanceProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t version = 0,
    bool deleted = false,
    uint8_t type = 0) {
  ObjectInstanceProtoBuilder builder_(_fbb);
  builder_.add_version(version);
  builder_.add_type(type);
  builder_.add_deleted(deleted);
  return builder_.Finish();
}

struct ObjectInstanceProto::Traits {
  using type = ObjectInstanceProto;
  static auto constexpr Create = CreateObjectInstanceProto;
};

struct ObjectPropertiesIndexProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ObjectPropertiesIndexProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PROPERTIES = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *properties() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_PROPERTIES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PROPERTIES) &&
           verifier.VerifyVector(properties()) &&
           verifier.VerifyVectorOfStrings(properties()) &&
           verifier.EndTable();
  }
};

struct ObjectPropertiesIndexProtoBuilder {
  typedef ObjectPropertiesIndexProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_properties(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> properties) {
    fbb_.AddOffset(ObjectPropertiesIndexProto::VT_PROPERTIES, properties);
  }
  explicit ObjectPropertiesIndexProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<ObjectPropertiesIndexProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ObjectPropertiesIndexProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<ObjectPropertiesIndexProto> CreateObjectPropertiesIndexProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> properties = 0) {
  ObjectPropertiesIndexProtoBuilder builder_(_fbb);
  builder_.add_properties(properties);
  return builder_.Finish();
}

struct ObjectPropertiesIndexProto::Traits {
  using type = ObjectPropertiesIndexProto;
  static auto constexpr Create = CreateObjectPropertiesIndexProto;
};

inline flatbuffers::Offset<ObjectPropertiesIndexProto> CreateObjectPropertiesIndexProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *properties = nullptr) {
  auto properties__ = properties ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*properties) : 0;
  return CreateObjectPropertiesIndexProto(
      _fbb,
      properties__);
}

#endif  // FLATBUFFERS_GENERATED_WORKERPROCESSENGINEMODEL_H_
