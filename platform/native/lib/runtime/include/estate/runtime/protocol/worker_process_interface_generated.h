// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_WORKERPROCESSINTERFACE_H_
#define FLATBUFFERS_GENERATED_WORKERPROCESSINTERFACE_H_

#include "flatbuffers/flatbuffers.h"

#include "WorkerIndexProto_generated.h"
#include "model_generated.h"
#include "interface_generated.h"

struct DeleteWorkerRequestProto;
struct DeleteWorkerRequestProtoBuilder;

struct DeleteWorkerResponseProto;
struct DeleteWorkerResponseProtoBuilder;

struct WorkerProcessUserResponseProto;
struct WorkerProcessUserResponseProtoBuilder;

struct SetupWorkerRequestProto;
struct SetupWorkerRequestProtoBuilder;

struct SetupWorkerResponseProto;
struct SetupWorkerResponseProtoBuilder;

enum class SetupWorkerErrorUnionProto : uint8_t {
  NONE = 0,
  ErrorCodeResponseProto = 1,
  ExceptionResponseProto = 2,
  MIN = NONE,
  MAX = ExceptionResponseProto
};

inline const SetupWorkerErrorUnionProto (&EnumValuesSetupWorkerErrorUnionProto())[3] {
  static const SetupWorkerErrorUnionProto values[] = {
    SetupWorkerErrorUnionProto::NONE,
    SetupWorkerErrorUnionProto::ErrorCodeResponseProto,
    SetupWorkerErrorUnionProto::ExceptionResponseProto
  };
  return values;
}

inline const char * const *EnumNamesSetupWorkerErrorUnionProto() {
  static const char * const names[4] = {
    "NONE",
    "ErrorCodeResponseProto",
    "ExceptionResponseProto",
    nullptr
  };
  return names;
}

inline const char *EnumNameSetupWorkerErrorUnionProto(SetupWorkerErrorUnionProto e) {
  if (flatbuffers::IsOutRange(e, SetupWorkerErrorUnionProto::NONE, SetupWorkerErrorUnionProto::ExceptionResponseProto)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesSetupWorkerErrorUnionProto()[index];
}

template<typename T> struct SetupWorkerErrorUnionProtoTraits {
  static const SetupWorkerErrorUnionProto enum_value = SetupWorkerErrorUnionProto::NONE;
};

template<> struct SetupWorkerErrorUnionProtoTraits<ErrorCodeResponseProto> {
  static const SetupWorkerErrorUnionProto enum_value = SetupWorkerErrorUnionProto::ErrorCodeResponseProto;
};

template<> struct SetupWorkerErrorUnionProtoTraits<ExceptionResponseProto> {
  static const SetupWorkerErrorUnionProto enum_value = SetupWorkerErrorUnionProto::ExceptionResponseProto;
};

bool VerifySetupWorkerErrorUnionProto(flatbuffers::Verifier &verifier, const void *obj, SetupWorkerErrorUnionProto type);
bool VerifySetupWorkerErrorUnionProtoVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct DeleteWorkerRequestProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DeleteWorkerRequestProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOG_CONTEXT = 4,
    VT_WORKER_ID = 6,
    VT_WORKER_VERSION = 8
  };
  const flatbuffers::String *log_context() const {
    return GetPointer<const flatbuffers::String *>(VT_LOG_CONTEXT);
  }
  uint64_t worker_id() const {
    return GetField<uint64_t>(VT_WORKER_ID, 0);
  }
  uint64_t worker_version() const {
    return GetField<uint64_t>(VT_WORKER_VERSION, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_LOG_CONTEXT) &&
           verifier.VerifyString(log_context()) &&
           VerifyField<uint64_t>(verifier, VT_WORKER_ID) &&
           VerifyField<uint64_t>(verifier, VT_WORKER_VERSION) &&
           verifier.EndTable();
  }
};

struct DeleteWorkerRequestProtoBuilder {
  typedef DeleteWorkerRequestProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_log_context(flatbuffers::Offset<flatbuffers::String> log_context) {
    fbb_.AddOffset(DeleteWorkerRequestProto::VT_LOG_CONTEXT, log_context);
  }
  void add_worker_id(uint64_t worker_id) {
    fbb_.AddElement<uint64_t>(DeleteWorkerRequestProto::VT_WORKER_ID, worker_id, 0);
  }
  void add_worker_version(uint64_t worker_version) {
    fbb_.AddElement<uint64_t>(DeleteWorkerRequestProto::VT_WORKER_VERSION, worker_version, 0);
  }
  explicit DeleteWorkerRequestProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DeleteWorkerRequestProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DeleteWorkerRequestProto>(end);
    fbb_.Required(o, DeleteWorkerRequestProto::VT_LOG_CONTEXT);
    return o;
  }
};

inline flatbuffers::Offset<DeleteWorkerRequestProto> CreateDeleteWorkerRequestProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> log_context = 0,
    uint64_t worker_id = 0,
    uint64_t worker_version = 0) {
  DeleteWorkerRequestProtoBuilder builder_(_fbb);
  builder_.add_worker_version(worker_version);
  builder_.add_worker_id(worker_id);
  builder_.add_log_context(log_context);
  return builder_.Finish();
}

struct DeleteWorkerRequestProto::Traits {
  using type = DeleteWorkerRequestProto;
  static auto constexpr Create = CreateDeleteWorkerRequestProto;
};

inline flatbuffers::Offset<DeleteWorkerRequestProto> CreateDeleteWorkerRequestProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *log_context = nullptr,
    uint64_t worker_id = 0,
    uint64_t worker_version = 0) {
  auto log_context__ = log_context ? _fbb.CreateString(log_context) : 0;
  return CreateDeleteWorkerRequestProto(
      _fbb,
      log_context__,
      worker_id,
      worker_version);
}

struct DeleteWorkerResponseProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef DeleteWorkerResponseProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR = 4
  };
  const ErrorCodeResponseProto *error() const {
    return GetPointer<const ErrorCodeResponseProto *>(VT_ERROR);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ERROR) &&
           verifier.VerifyTable(error()) &&
           verifier.EndTable();
  }
};

struct DeleteWorkerResponseProtoBuilder {
  typedef DeleteWorkerResponseProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error(flatbuffers::Offset<ErrorCodeResponseProto> error) {
    fbb_.AddOffset(DeleteWorkerResponseProto::VT_ERROR, error);
  }
  explicit DeleteWorkerResponseProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<DeleteWorkerResponseProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<DeleteWorkerResponseProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<DeleteWorkerResponseProto> CreateDeleteWorkerResponseProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ErrorCodeResponseProto> error = 0) {
  DeleteWorkerResponseProtoBuilder builder_(_fbb);
  builder_.add_error(error);
  return builder_.Finish();
}

struct DeleteWorkerResponseProto::Traits {
  using type = DeleteWorkerResponseProto;
  static auto constexpr Create = CreateDeleteWorkerResponseProto;
};

struct WorkerProcessUserResponseProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef WorkerProcessUserResponseProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_RESPONSE = 4,
    VT_DELTAS = 6,
    VT_EVENTS = 8,
    VT_CONSOLE_LOG = 10
  };
  const flatbuffers::Vector<uint8_t> *response() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_RESPONSE);
  }
  const UserResponseUnionWrapperProto *response_nested_root() const {
    return flatbuffers::GetRoot<UserResponseUnionWrapperProto>(response()->Data());
  }
  const flatbuffers::Vector<flatbuffers::Offset<DataDeltaBytesProto>> *deltas() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<DataDeltaBytesProto>> *>(VT_DELTAS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<MessageBytesProto>> *events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<MessageBytesProto>> *>(VT_EVENTS);
  }
  const flatbuffers::Vector<uint8_t> *console_log() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_CONSOLE_LOG);
  }
  const ConsoleLogProto *console_log_nested_root() const {
    return flatbuffers::GetRoot<ConsoleLogProto>(console_log()->Data());
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_RESPONSE) &&
           verifier.VerifyVector(response()) &&
           VerifyOffset(verifier, VT_DELTAS) &&
           verifier.VerifyVector(deltas()) &&
           verifier.VerifyVectorOfTables(deltas()) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.VerifyVector(events()) &&
           verifier.VerifyVectorOfTables(events()) &&
           VerifyOffset(verifier, VT_CONSOLE_LOG) &&
           verifier.VerifyVector(console_log()) &&
           verifier.EndTable();
  }
};

struct WorkerProcessUserResponseProtoBuilder {
  typedef WorkerProcessUserResponseProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_response(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> response) {
    fbb_.AddOffset(WorkerProcessUserResponseProto::VT_RESPONSE, response);
  }
  void add_deltas(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DataDeltaBytesProto>>> deltas) {
    fbb_.AddOffset(WorkerProcessUserResponseProto::VT_DELTAS, deltas);
  }
  void add_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MessageBytesProto>>> events) {
    fbb_.AddOffset(WorkerProcessUserResponseProto::VT_EVENTS, events);
  }
  void add_console_log(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> console_log) {
    fbb_.AddOffset(WorkerProcessUserResponseProto::VT_CONSOLE_LOG, console_log);
  }
  explicit WorkerProcessUserResponseProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<WorkerProcessUserResponseProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<WorkerProcessUserResponseProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<WorkerProcessUserResponseProto> CreateWorkerProcessUserResponseProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> response = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<DataDeltaBytesProto>>> deltas = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<MessageBytesProto>>> events = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> console_log = 0) {
  WorkerProcessUserResponseProtoBuilder builder_(_fbb);
  builder_.add_console_log(console_log);
  builder_.add_events(events);
  builder_.add_deltas(deltas);
  builder_.add_response(response);
  return builder_.Finish();
}

struct WorkerProcessUserResponseProto::Traits {
  using type = WorkerProcessUserResponseProto;
  static auto constexpr Create = CreateWorkerProcessUserResponseProto;
};

inline flatbuffers::Offset<WorkerProcessUserResponseProto> CreateWorkerProcessUserResponseProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<uint8_t> *response = nullptr,
    const std::vector<flatbuffers::Offset<DataDeltaBytesProto>> *deltas = nullptr,
    const std::vector<flatbuffers::Offset<MessageBytesProto>> *events = nullptr,
    const std::vector<uint8_t> *console_log = nullptr) {
  auto response__ = response ? _fbb.CreateVector<uint8_t>(*response) : 0;
  auto deltas__ = deltas ? _fbb.CreateVector<flatbuffers::Offset<DataDeltaBytesProto>>(*deltas) : 0;
  auto events__ = events ? _fbb.CreateVector<flatbuffers::Offset<MessageBytesProto>>(*events) : 0;
  auto console_log__ = console_log ? _fbb.CreateVector<uint8_t>(*console_log) : 0;
  return CreateWorkerProcessUserResponseProto(
      _fbb,
      response__,
      deltas__,
      events__,
      console_log__);
}

struct SetupWorkerRequestProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SetupWorkerRequestProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_LOG_CONTEXT = 4,
    VT_WORKER_ID = 6,
    VT_WORKER_VERSION = 8,
    VT_PREVIOUS_WORKER_VERSION = 10,
    VT_WORKER_INDEX = 12,
    VT_WORKER_CODE = 14
  };
  const flatbuffers::String *log_context() const {
    return GetPointer<const flatbuffers::String *>(VT_LOG_CONTEXT);
  }
  uint64_t worker_id() const {
    return GetField<uint64_t>(VT_WORKER_ID, 0);
  }
  uint64_t worker_version() const {
    return GetField<uint64_t>(VT_WORKER_VERSION, 0);
  }
  uint64_t previous_worker_version() const {
    return GetField<uint64_t>(VT_PREVIOUS_WORKER_VERSION, 0);
  }
  const flatbuffers::Vector<uint8_t> *worker_index() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_WORKER_INDEX);
  }
  const WorkerIndexProto *worker_index_nested_root() const {
    return flatbuffers::GetRoot<WorkerIndexProto>(worker_index()->Data());
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *worker_code() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_WORKER_CODE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_LOG_CONTEXT) &&
           verifier.VerifyString(log_context()) &&
           VerifyField<uint64_t>(verifier, VT_WORKER_ID) &&
           VerifyField<uint64_t>(verifier, VT_WORKER_VERSION) &&
           VerifyField<uint64_t>(verifier, VT_PREVIOUS_WORKER_VERSION) &&
           VerifyOffsetRequired(verifier, VT_WORKER_INDEX) &&
           verifier.VerifyVector(worker_index()) &&
           VerifyOffsetRequired(verifier, VT_WORKER_CODE) &&
           verifier.VerifyVector(worker_code()) &&
           verifier.VerifyVectorOfStrings(worker_code()) &&
           verifier.EndTable();
  }
};

struct SetupWorkerRequestProtoBuilder {
  typedef SetupWorkerRequestProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_log_context(flatbuffers::Offset<flatbuffers::String> log_context) {
    fbb_.AddOffset(SetupWorkerRequestProto::VT_LOG_CONTEXT, log_context);
  }
  void add_worker_id(uint64_t worker_id) {
    fbb_.AddElement<uint64_t>(SetupWorkerRequestProto::VT_WORKER_ID, worker_id, 0);
  }
  void add_worker_version(uint64_t worker_version) {
    fbb_.AddElement<uint64_t>(SetupWorkerRequestProto::VT_WORKER_VERSION, worker_version, 0);
  }
  void add_previous_worker_version(uint64_t previous_worker_version) {
    fbb_.AddElement<uint64_t>(SetupWorkerRequestProto::VT_PREVIOUS_WORKER_VERSION, previous_worker_version, 0);
  }
  void add_worker_index(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> worker_index) {
    fbb_.AddOffset(SetupWorkerRequestProto::VT_WORKER_INDEX, worker_index);
  }
  void add_worker_code(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> worker_code) {
    fbb_.AddOffset(SetupWorkerRequestProto::VT_WORKER_CODE, worker_code);
  }
  explicit SetupWorkerRequestProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SetupWorkerRequestProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetupWorkerRequestProto>(end);
    fbb_.Required(o, SetupWorkerRequestProto::VT_LOG_CONTEXT);
    fbb_.Required(o, SetupWorkerRequestProto::VT_WORKER_INDEX);
    fbb_.Required(o, SetupWorkerRequestProto::VT_WORKER_CODE);
    return o;
  }
};

inline flatbuffers::Offset<SetupWorkerRequestProto> CreateSetupWorkerRequestProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> log_context = 0,
    uint64_t worker_id = 0,
    uint64_t worker_version = 0,
    uint64_t previous_worker_version = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> worker_index = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> worker_code = 0) {
  SetupWorkerRequestProtoBuilder builder_(_fbb);
  builder_.add_previous_worker_version(previous_worker_version);
  builder_.add_worker_version(worker_version);
  builder_.add_worker_id(worker_id);
  builder_.add_worker_code(worker_code);
  builder_.add_worker_index(worker_index);
  builder_.add_log_context(log_context);
  return builder_.Finish();
}

struct SetupWorkerRequestProto::Traits {
  using type = SetupWorkerRequestProto;
  static auto constexpr Create = CreateSetupWorkerRequestProto;
};

inline flatbuffers::Offset<SetupWorkerRequestProto> CreateSetupWorkerRequestProtoDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *log_context = nullptr,
    uint64_t worker_id = 0,
    uint64_t worker_version = 0,
    uint64_t previous_worker_version = 0,
    const std::vector<uint8_t> *worker_index = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *worker_code = nullptr) {
  auto log_context__ = log_context ? _fbb.CreateString(log_context) : 0;
  auto worker_index__ = worker_index ? _fbb.CreateVector<uint8_t>(*worker_index) : 0;
  auto worker_code__ = worker_code ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*worker_code) : 0;
  return CreateSetupWorkerRequestProto(
      _fbb,
      log_context__,
      worker_id,
      worker_version,
      previous_worker_version,
      worker_index__,
      worker_code__);
}

struct SetupWorkerResponseProto FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SetupWorkerResponseProtoBuilder Builder;
  struct Traits;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ERROR_TYPE = 4,
    VT_ERROR = 6
  };
  SetupWorkerErrorUnionProto error_type() const {
    return static_cast<SetupWorkerErrorUnionProto>(GetField<uint8_t>(VT_ERROR_TYPE, 0));
  }
  const void *error() const {
    return GetPointer<const void *>(VT_ERROR);
  }
  template<typename T> const T *error_as() const;
  const ErrorCodeResponseProto *error_as_ErrorCodeResponseProto() const {
    return error_type() == SetupWorkerErrorUnionProto::ErrorCodeResponseProto ? static_cast<const ErrorCodeResponseProto *>(error()) : nullptr;
  }
  const ExceptionResponseProto *error_as_ExceptionResponseProto() const {
    return error_type() == SetupWorkerErrorUnionProto::ExceptionResponseProto ? static_cast<const ExceptionResponseProto *>(error()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint8_t>(verifier, VT_ERROR_TYPE) &&
           VerifyOffset(verifier, VT_ERROR) &&
           VerifySetupWorkerErrorUnionProto(verifier, error(), error_type()) &&
           verifier.EndTable();
  }
};

template<> inline const ErrorCodeResponseProto *SetupWorkerResponseProto::error_as<ErrorCodeResponseProto>() const {
  return error_as_ErrorCodeResponseProto();
}

template<> inline const ExceptionResponseProto *SetupWorkerResponseProto::error_as<ExceptionResponseProto>() const {
  return error_as_ExceptionResponseProto();
}

struct SetupWorkerResponseProtoBuilder {
  typedef SetupWorkerResponseProto Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_error_type(SetupWorkerErrorUnionProto error_type) {
    fbb_.AddElement<uint8_t>(SetupWorkerResponseProto::VT_ERROR_TYPE, static_cast<uint8_t>(error_type), 0);
  }
  void add_error(flatbuffers::Offset<void> error) {
    fbb_.AddOffset(SetupWorkerResponseProto::VT_ERROR, error);
  }
  explicit SetupWorkerResponseProtoBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<SetupWorkerResponseProto> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<SetupWorkerResponseProto>(end);
    return o;
  }
};

inline flatbuffers::Offset<SetupWorkerResponseProto> CreateSetupWorkerResponseProto(
    flatbuffers::FlatBufferBuilder &_fbb,
    SetupWorkerErrorUnionProto error_type = SetupWorkerErrorUnionProto::NONE,
    flatbuffers::Offset<void> error = 0) {
  SetupWorkerResponseProtoBuilder builder_(_fbb);
  builder_.add_error(error);
  builder_.add_error_type(error_type);
  return builder_.Finish();
}

struct SetupWorkerResponseProto::Traits {
  using type = SetupWorkerResponseProto;
  static auto constexpr Create = CreateSetupWorkerResponseProto;
};

inline bool VerifySetupWorkerErrorUnionProto(flatbuffers::Verifier &verifier, const void *obj, SetupWorkerErrorUnionProto type) {
  switch (type) {
    case SetupWorkerErrorUnionProto::NONE: {
      return true;
    }
    case SetupWorkerErrorUnionProto::ErrorCodeResponseProto: {
      auto ptr = reinterpret_cast<const ErrorCodeResponseProto *>(obj);
      return verifier.VerifyTable(ptr);
    }
    case SetupWorkerErrorUnionProto::ExceptionResponseProto: {
      auto ptr = reinterpret_cast<const ExceptionResponseProto *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return true;
  }
}

inline bool VerifySetupWorkerErrorUnionProtoVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifySetupWorkerErrorUnionProto(
        verifier,  values->Get(i), types->GetEnum<SetupWorkerErrorUnionProto>(i))) {
      return false;
    }
  }
  return true;
}

#endif  // FLATBUFFERS_GENERATED_WORKERPROCESSINTERFACE_H_
