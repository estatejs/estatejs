// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct NestedPropertyProto : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static NestedPropertyProto GetRootAsNestedPropertyProto(ByteBuffer _bb) { return GetRootAsNestedPropertyProto(_bb, new NestedPropertyProto()); }
  public static NestedPropertyProto GetRootAsNestedPropertyProto(ByteBuffer _bb, NestedPropertyProto obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NestedPropertyProto __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public byte ValueBytes(int j) { int o = __p.__offset(6); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int ValueBytesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetValueBytesBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetValueBytesBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetValueBytesArray() { return __p.__vector_as_array<byte>(6); }
  public ValueProto? GetValueBytesAsValueProto() { int o = __p.__offset(6); return o != 0 ? (ValueProto?)(new ValueProto()).__assign(__p.__indirect(__p.__vector(o)), __p.bb) : null; }

  public static Offset<NestedPropertyProto> CreateNestedPropertyProto(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      VectorOffset value_bytesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    NestedPropertyProto.AddValueBytes(builder, value_bytesOffset);
    NestedPropertyProto.AddName(builder, nameOffset);
    return NestedPropertyProto.EndNestedPropertyProto(builder);
  }

  public static void StartNestedPropertyProto(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddValueBytes(FlatBufferBuilder builder, VectorOffset valueBytesOffset) { builder.AddOffset(1, valueBytesOffset.Value, 0); }
  public static VectorOffset CreateValueBytesVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValueBytesVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartValueBytesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<NestedPropertyProto> EndNestedPropertyProto(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // name
    return new Offset<NestedPropertyProto>(o);
  }
};

