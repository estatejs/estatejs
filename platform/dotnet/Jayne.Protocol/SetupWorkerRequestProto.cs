// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct SetupWorkerRequestProto : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static SetupWorkerRequestProto GetRootAsSetupWorkerRequestProto(ByteBuffer _bb) { return GetRootAsSetupWorkerRequestProto(_bb, new SetupWorkerRequestProto()); }
  public static SetupWorkerRequestProto GetRootAsSetupWorkerRequestProto(ByteBuffer _bb, SetupWorkerRequestProto obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public SetupWorkerRequestProto __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LogContext { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLogContextBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLogContextBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLogContextArray() { return __p.__vector_as_array<byte>(4); }
  public ulong WorkerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong WorkerVersion { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong PreviousWorkerVersion { get { int o = __p.__offset(10); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public byte WorkerIndex(int j) { int o = __p.__offset(12); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int WorkerIndexLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetWorkerIndexBytes() { return __p.__vector_as_span<byte>(12, 1); }
#else
  public ArraySegment<byte>? GetWorkerIndexBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetWorkerIndexArray() { return __p.__vector_as_array<byte>(12); }
  public WorkerIndexProto? GetWorkerIndexAsWorkerIndexProto() { int o = __p.__offset(12); return o != 0 ? (WorkerIndexProto?)(new WorkerIndexProto()).__assign(__p.__indirect(__p.__vector(o)), __p.bb) : null; }
  public string WorkerCode(int j) { int o = __p.__offset(14); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int WorkerCodeLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<SetupWorkerRequestProto> CreateSetupWorkerRequestProto(FlatBufferBuilder builder,
      StringOffset log_contextOffset = default(StringOffset),
      ulong worker_id = 0,
      ulong worker_version = 0,
      ulong previous_worker_version = 0,
      VectorOffset worker_indexOffset = default(VectorOffset),
      VectorOffset worker_codeOffset = default(VectorOffset)) {
    builder.StartTable(6);
    SetupWorkerRequestProto.AddPreviousWorkerVersion(builder, previous_worker_version);
    SetupWorkerRequestProto.AddWorkerVersion(builder, worker_version);
    SetupWorkerRequestProto.AddWorkerId(builder, worker_id);
    SetupWorkerRequestProto.AddWorkerCode(builder, worker_codeOffset);
    SetupWorkerRequestProto.AddWorkerIndex(builder, worker_indexOffset);
    SetupWorkerRequestProto.AddLogContext(builder, log_contextOffset);
    return SetupWorkerRequestProto.EndSetupWorkerRequestProto(builder);
  }

  public static void StartSetupWorkerRequestProto(FlatBufferBuilder builder) { builder.StartTable(6); }
  public static void AddLogContext(FlatBufferBuilder builder, StringOffset logContextOffset) { builder.AddOffset(0, logContextOffset.Value, 0); }
  public static void AddWorkerId(FlatBufferBuilder builder, ulong workerId) { builder.AddUlong(1, workerId, 0); }
  public static void AddWorkerVersion(FlatBufferBuilder builder, ulong workerVersion) { builder.AddUlong(2, workerVersion, 0); }
  public static void AddPreviousWorkerVersion(FlatBufferBuilder builder, ulong previousWorkerVersion) { builder.AddUlong(3, previousWorkerVersion, 0); }
  public static void AddWorkerIndex(FlatBufferBuilder builder, VectorOffset workerIndexOffset) { builder.AddOffset(4, workerIndexOffset.Value, 0); }
  public static VectorOffset CreateWorkerIndexVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateWorkerIndexVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartWorkerIndexVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddWorkerCode(FlatBufferBuilder builder, VectorOffset workerCodeOffset) { builder.AddOffset(5, workerCodeOffset.Value, 0); }
  public static VectorOffset CreateWorkerCodeVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateWorkerCodeVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartWorkerCodeVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<SetupWorkerRequestProto> EndSetupWorkerRequestProto(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // log_context
    builder.Required(o, 12);  // worker_index
    builder.Required(o, 14);  // worker_code
    return new Offset<SetupWorkerRequestProto>(o);
  }
};

