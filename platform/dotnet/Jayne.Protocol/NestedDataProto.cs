// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct NestedDataProto : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static NestedDataProto GetRootAsNestedDataProto(ByteBuffer _bb) { return GetRootAsNestedDataProto(_bb, new NestedDataProto()); }
  public static NestedDataProto GetRootAsNestedDataProto(ByteBuffer _bb, NestedDataProto obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public NestedDataProto __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort ClassId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ulong ObjectVersion { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public string PrimaryKey { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetPrimaryKeyBytes() { return __p.__vector_as_span<byte>(8, 1); }
#else
  public ArraySegment<byte>? GetPrimaryKeyBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetPrimaryKeyArray() { return __p.__vector_as_array<byte>(8); }
  public bool Deleted { get { int o = __p.__offset(10); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public NestedPropertyProto? Properties(int j) { int o = __p.__offset(12); return o != 0 ? (NestedPropertyProto?)(new NestedPropertyProto()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int PropertiesLength { get { int o = __p.__offset(12); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<NestedDataProto> CreateNestedDataProto(FlatBufferBuilder builder,
      ushort class_id = 0,
      ulong object_version = 0,
      StringOffset primary_keyOffset = default(StringOffset),
      bool deleted = false,
      VectorOffset propertiesOffset = default(VectorOffset)) {
    builder.StartTable(5);
    NestedDataProto.AddObjectVersion(builder, object_version);
    NestedDataProto.AddProperties(builder, propertiesOffset);
    NestedDataProto.AddPrimaryKey(builder, primary_keyOffset);
    NestedDataProto.AddClassId(builder, class_id);
    NestedDataProto.AddDeleted(builder, deleted);
    return NestedDataProto.EndNestedDataProto(builder);
  }

  public static void StartNestedDataProto(FlatBufferBuilder builder) { builder.StartTable(5); }
  public static void AddClassId(FlatBufferBuilder builder, ushort classId) { builder.AddUshort(0, classId, 0); }
  public static void AddObjectVersion(FlatBufferBuilder builder, ulong objectVersion) { builder.AddUlong(1, objectVersion, 0); }
  public static void AddPrimaryKey(FlatBufferBuilder builder, StringOffset primaryKeyOffset) { builder.AddOffset(2, primaryKeyOffset.Value, 0); }
  public static void AddDeleted(FlatBufferBuilder builder, bool deleted) { builder.AddBool(3, deleted, false); }
  public static void AddProperties(FlatBufferBuilder builder, VectorOffset propertiesOffset) { builder.AddOffset(4, propertiesOffset.Value, 0); }
  public static VectorOffset CreatePropertiesVector(FlatBufferBuilder builder, Offset<NestedPropertyProto>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreatePropertiesVectorBlock(FlatBufferBuilder builder, Offset<NestedPropertyProto>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartPropertiesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<NestedDataProto> EndNestedDataProto(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 8);  // primary_key
    return new Offset<NestedDataProto>(o);
  }
};

