// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ServiceClassProto : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ServiceClassProto GetRootAsServiceClassProto(ByteBuffer _bb) { return GetRootAsServiceClassProto(_bb, new ServiceClassProto()); }
  public static ServiceClassProto GetRootAsServiceClassProto(ByteBuffer _bb, ServiceClassProto obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ServiceClassProto __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort ClassId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public string ClassName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClassNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetClassNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetClassNameArray() { return __p.__vector_as_array<byte>(6); }
  public ushort FileNameId { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public ServiceMethodProto? Methods(int j) { int o = __p.__offset(10); return o != 0 ? (ServiceMethodProto?)(new ServiceMethodProto()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int MethodsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<ServiceClassProto> CreateServiceClassProto(FlatBufferBuilder builder,
      ushort class_id = 0,
      StringOffset class_nameOffset = default(StringOffset),
      ushort file_name_id = 0,
      VectorOffset methodsOffset = default(VectorOffset)) {
    builder.StartTable(4);
    ServiceClassProto.AddMethods(builder, methodsOffset);
    ServiceClassProto.AddClassName(builder, class_nameOffset);
    ServiceClassProto.AddFileNameId(builder, file_name_id);
    ServiceClassProto.AddClassId(builder, class_id);
    return ServiceClassProto.EndServiceClassProto(builder);
  }

  public static void StartServiceClassProto(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddClassId(FlatBufferBuilder builder, ushort classId) { builder.AddUshort(0, classId, 0); }
  public static void AddClassName(FlatBufferBuilder builder, StringOffset classNameOffset) { builder.AddOffset(1, classNameOffset.Value, 0); }
  public static void AddFileNameId(FlatBufferBuilder builder, ushort fileNameId) { builder.AddUshort(2, fileNameId, 0); }
  public static void AddMethods(FlatBufferBuilder builder, VectorOffset methodsOffset) { builder.AddOffset(3, methodsOffset.Value, 0); }
  public static VectorOffset CreateMethodsVector(FlatBufferBuilder builder, Offset<ServiceMethodProto>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateMethodsVectorBlock(FlatBufferBuilder builder, Offset<ServiceMethodProto>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartMethodsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<ServiceClassProto> EndServiceClassProto(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // class_name
    builder.Required(o, 10);  // methods
    return new Offset<ServiceClassProto>(o);
  }
};

