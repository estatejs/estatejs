// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct WorkerFileNameProto : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static WorkerFileNameProto GetRootAsWorkerFileNameProto(ByteBuffer _bb) { return GetRootAsWorkerFileNameProto(_bb, new WorkerFileNameProto()); }
  public static WorkerFileNameProto GetRootAsWorkerFileNameProto(ByteBuffer _bb, WorkerFileNameProto obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public WorkerFileNameProto __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort FileNameId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public string FileName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFileNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetFileNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetFileNameArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<WorkerFileNameProto> CreateWorkerFileNameProto(FlatBufferBuilder builder,
      ushort file_name_id = 0,
      StringOffset file_nameOffset = default(StringOffset)) {
    builder.StartTable(2);
    WorkerFileNameProto.AddFileName(builder, file_nameOffset);
    WorkerFileNameProto.AddFileNameId(builder, file_name_id);
    return WorkerFileNameProto.EndWorkerFileNameProto(builder);
  }

  public static void StartWorkerFileNameProto(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddFileNameId(FlatBufferBuilder builder, ushort fileNameId) { builder.AddUshort(0, fileNameId, 0); }
  public static void AddFileName(FlatBufferBuilder builder, StringOffset fileNameOffset) { builder.AddOffset(1, fileNameOffset.Value, 0); }
  public static Offset<WorkerFileNameProto> EndWorkerFileNameProto(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // file_name
    return new Offset<WorkerFileNameProto>(o);
  }
};

