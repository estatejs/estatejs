// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct ServiceMethodProto : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static ServiceMethodProto GetRootAsServiceMethodProto(ByteBuffer _bb) { return GetRootAsServiceMethodProto(_bb, new ServiceMethodProto()); }
  public static ServiceMethodProto GetRootAsServiceMethodProto(ByteBuffer _bb, ServiceMethodProto obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public ServiceMethodProto __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ushort MethodId { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetUshort(o + __p.bb_pos) : (ushort)0; } }
  public string MethodName { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetMethodNameBytes() { return __p.__vector_as_span<byte>(6, 1); }
#else
  public ArraySegment<byte>? GetMethodNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetMethodNameArray() { return __p.__vector_as_array<byte>(6); }
  public MethodArgumentProto? Arguments(int j) { int o = __p.__offset(8); return o != 0 ? (MethodArgumentProto?)(new MethodArgumentProto()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ArgumentsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string ReturnType { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetReturnTypeBytes() { return __p.__vector_as_span<byte>(10, 1); }
#else
  public ArraySegment<byte>? GetReturnTypeBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetReturnTypeArray() { return __p.__vector_as_array<byte>(10); }

  public static Offset<ServiceMethodProto> CreateServiceMethodProto(FlatBufferBuilder builder,
      ushort method_id = 0,
      StringOffset method_nameOffset = default(StringOffset),
      VectorOffset argumentsOffset = default(VectorOffset),
      StringOffset return_typeOffset = default(StringOffset)) {
    builder.StartTable(4);
    ServiceMethodProto.AddReturnType(builder, return_typeOffset);
    ServiceMethodProto.AddArguments(builder, argumentsOffset);
    ServiceMethodProto.AddMethodName(builder, method_nameOffset);
    ServiceMethodProto.AddMethodId(builder, method_id);
    return ServiceMethodProto.EndServiceMethodProto(builder);
  }

  public static void StartServiceMethodProto(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddMethodId(FlatBufferBuilder builder, ushort methodId) { builder.AddUshort(0, methodId, 0); }
  public static void AddMethodName(FlatBufferBuilder builder, StringOffset methodNameOffset) { builder.AddOffset(1, methodNameOffset.Value, 0); }
  public static void AddArguments(FlatBufferBuilder builder, VectorOffset argumentsOffset) { builder.AddOffset(2, argumentsOffset.Value, 0); }
  public static VectorOffset CreateArgumentsVector(FlatBufferBuilder builder, Offset<MethodArgumentProto>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateArgumentsVectorBlock(FlatBufferBuilder builder, Offset<MethodArgumentProto>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartArgumentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddReturnType(FlatBufferBuilder builder, StringOffset returnTypeOffset) { builder.AddOffset(3, returnTypeOffset.Value, 0); }
  public static Offset<ServiceMethodProto> EndServiceMethodProto(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 6);  // method_name
    return new Offset<ServiceMethodProto>(o);
  }
};

