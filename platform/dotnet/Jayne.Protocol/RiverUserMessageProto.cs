// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

using global::System;
using global::System.Collections.Generic;
using global::FlatBuffers;

public struct RiverUserMessageProto : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_2_0_0(); }
  public static RiverUserMessageProto GetRootAsRiverUserMessageProto(ByteBuffer _bb) { return GetRootAsRiverUserMessageProto(_bb, new RiverUserMessageProto()); }
  public static RiverUserMessageProto GetRootAsRiverUserMessageProto(ByteBuffer _bb, RiverUserMessageProto obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public RiverUserMessageProto __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string LogContext { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetLogContextBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
  public ArraySegment<byte>? GetLogContextBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetLogContextArray() { return __p.__vector_as_array<byte>(4); }
  public ulong WorkerId { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public ulong WorkerVersion { get { int o = __p.__offset(8); return o != 0 ? __p.bb.GetUlong(o + __p.bb_pos) : (ulong)0; } }
  public UserMessageUnionWrapperBytesProto? Message { get { int o = __p.__offset(10); return o != 0 ? (UserMessageUnionWrapperBytesProto?)(new UserMessageUnionWrapperBytesProto()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<RiverUserMessageProto> CreateRiverUserMessageProto(FlatBufferBuilder builder,
      StringOffset log_contextOffset = default(StringOffset),
      ulong worker_id = 0,
      ulong worker_version = 0,
      Offset<UserMessageUnionWrapperBytesProto> messageOffset = default(Offset<UserMessageUnionWrapperBytesProto>)) {
    builder.StartTable(4);
    RiverUserMessageProto.AddWorkerVersion(builder, worker_version);
    RiverUserMessageProto.AddWorkerId(builder, worker_id);
    RiverUserMessageProto.AddMessage(builder, messageOffset);
    RiverUserMessageProto.AddLogContext(builder, log_contextOffset);
    return RiverUserMessageProto.EndRiverUserMessageProto(builder);
  }

  public static void StartRiverUserMessageProto(FlatBufferBuilder builder) { builder.StartTable(4); }
  public static void AddLogContext(FlatBufferBuilder builder, StringOffset logContextOffset) { builder.AddOffset(0, logContextOffset.Value, 0); }
  public static void AddWorkerId(FlatBufferBuilder builder, ulong workerId) { builder.AddUlong(1, workerId, 0); }
  public static void AddWorkerVersion(FlatBufferBuilder builder, ulong workerVersion) { builder.AddUlong(2, workerVersion, 0); }
  public static void AddMessage(FlatBufferBuilder builder, Offset<UserMessageUnionWrapperBytesProto> messageOffset) { builder.AddOffset(3, messageOffset.Value, 0); }
  public static Offset<RiverUserMessageProto> EndRiverUserMessageProto(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    builder.Required(o, 4);  // log_context
    return new Offset<RiverUserMessageProto>(o);
  }
};

