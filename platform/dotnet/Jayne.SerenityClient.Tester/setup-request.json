{
  "LogContext": "SETUPREQ1_",
  "WorkerId": 30,
  "WorkerVersion": 1,
  "PreviousWorkerVersion": null,
  "Code": [
    "import {\n    system,\n    createUuid,\n    Message,\n    Data,\n    Service\n} from \"worker-runtime\";\n\nexport class Exercise extends Data {\n    constructor(user, description, duration, date) {\n        super(createUuid(false));\n        this.user = user;\n        this.description = description;\n        this.duration = duration;\n        this.date = date;\n        console.log(`Exercise ${this.primaryKey} created`);\n    }\n\n    get user() {\n        return this._user;\n    }\n\n    set user(value) {\n        if (!value || !value instanceof User)\n            throw new Error(\"user is invalid\");\n        this._user = value;\n    }\n\n    get description() {\n        return this._description;\n    }\n\n    set description(value) {\n        if (!value || typeof value !== 'string')\n            throw new Error(\"description is invalid\");\n        this._description = value;\n    }\n\n    get duration() {\n        return this._duration;\n    }\n\n    set duration(value) {\n        if (typeof value !== 'number' || value < 1)\n            throw new Error(\"duration is invalid\");\n        this._duration = value;\n    }\n\n    get date() {\n        return this._date;\n    }\n\n    set date(value) {\n        if (!value || !value instanceof Date)\n            throw new Error(\"date is invalid\");\n        this._date = value;\n    }\n}\n\nexport class ExerciseAdded extends Message {\n    constructor(exercise) {\n        super();\n        this.exercise = exercise;\n        console.log(`ExerciseAdded created for Exercise ${this.exercise.primaryKey}`);\n    }\n}\n\nexport class User extends Data {\n    constructor(username) {\n        super(username);\n        this.username = username;\n        console.log(`User ${this.primaryKey} created`);\n    }\n\n    get username() {\n        return this._username;\n    }\n\n    set username(value) {\n        if (!value || typeof value != 'string')\n            throw new Error(\"username is missing\");\n        value = value.trim()\n        if (value.length < 3)\n            throw new Error(\"username is too short\");\n        if (value.length > 50)\n            throw new Error(\"username is too long\");\n        this._username = value;\n    }\n}\n\nexport class ExerciseTrackerService extends Service {\n    constructor(primaryKey) {\n        super(primaryKey);\n        this._userIndex = new Set();\n        this._exerciseIndex = new Set();\n        console.log(`ExerciseTrackerService ${this.primaryKey} created`);\n    }\n\n    deleteUser(user) {\n        this._userIndex.delete(user.primaryKey);\n        system.delete(user);\n        console.log(`User ${user.primaryKey} deleted`);\n    }\n\n    addUser(username) {\n        if (this._userIndex.has(username)) {\n            console.error(`Failed to add user ${username} because one already exists with that name.`);\n            throw new Error(\"A user with that name already exists\");\n        }\n        const user = new User(username);\n        system.saveObjects(user);\n        this._userIndex.add(user.primaryKey);\n        console.log(`User ${user.primaryKey} added successfully`);\n        return user;\n    }\n\n    userExists(username) {\n        return this._userIndex.has(username);\n    }\n\n    tryGetUser(username) {\n        if (this._userIndex.has(username))\n            return system.getObject(User, username);\n        return null;\n    }\n\n    getUsers() {\n        let users = [];\n        for (const pk of this._userIndex)\n            users.push(system.getObject(User, pk));\n        return users;\n    }\n\n    addExercise(exercise) {\n        if (!exercise || !exercise instanceof Exercise) {\n            console.error(`Failed to add exercise because ${JSON.stringify(exercise)} was invalid`);\n            throw new Error('Exercise was invalid');\n        }\n        system.saveObjects(exercise);\n        this._exerciseIndex.add(exercise.primaryKey);\n        console.log(`The user ${exercise.user.username} added the exercise ${exercise.primaryKey} successfully`);\n        system.fireEvent(this, new ExerciseAdded(exercise));\n    }\n\n    deleteExercise(primaryKey) {\n        const exercise = system.getObject(Exercise, primaryKey);\n        if(exercise) {\n            this._exerciseIndex.delete(exercise.primaryKey);\n            system.delete(exercise);\n            console.log(`Exercise ${primaryKey} deleted successfully`);\n        } else {\n            console.error(`Failed to delete exercise ${primaryKey} because it does not exist`);\n            throw new Error('Failed to delete exercise because it does not exist');\n        }\n    }\n\n    getMaxDuration() {\n        let max = null;\n        for (const pk of this._exerciseIndex) {\n            const exercise = system.getObject(Exercise, pk);\n            if (!max || exercise.duration > max)\n                max = exercise.duration;\n        }\n        return max;\n    }\n\n    getExercises() {\n        let exercises = [];\n        for (const pk of this._exerciseIndex) {\n            exercises.push(system.getObject(Exercise, pk));\n        }\n        return exercises;\n    }\n}\n"
  ]
}